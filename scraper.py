#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRAPER DE ALTURAS DE R√çOS - PREFECTURA NAVAL ARGENTINA
=======================================================

Este script extrae datos de alturas de r√≠os de la p√°gina oficial de la PNA
y procesa √∫nicamente las 36 estaciones espec√≠ficas requeridas.

Autor: Sistema de Monitoreo PNA
Fecha: 2025-10-27
URL: https://contenidosweb.prefecturanaval.gob.ar/alturas/index.php
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import json
import logging
from datetime import datetime, timedelta
import time
import re
import os
import sys
from colorama import init, Fore, Back, Style
import pywhatkit as pwk
import config
import getpass

# Selenium para automatizaci√≥n web
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

# Inicializar colorama para colores en Windows
init(autoreset=True)

class ScraperPNA:
    def __init__(self):
        """Inicializar el scraper con configuraciones"""
        self.url = config.URL_PNA
        self.estaciones_objetivo = config.ESTACIONES_OBJETIVO
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': config.USER_AGENT})
        self.datos_extraidos = []
        self.timestamp = datetime.now()
        
        # Crear directorios si no existen
        os.makedirs(config.CARPETA_DATOS, exist_ok=True)
        os.makedirs(config.CARPETA_LOGS, exist_ok=True)
        
        # Configurar logging
        self.setup_logging()
        
        # Mostrar banner inicial
        self.mostrar_banner()
    
    def setup_logging(self):
        """Configurar sistema de logging"""
        fecha_str = self.timestamp.strftime("%Y%m%d")
        log_file = config.ARCHIVO_LOG.format(fecha_str)
        
        logging.basicConfig(
            level=logging.INFO if config.DEBUG_MODE else logging.WARNING,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def mostrar_banner(self):
        """Mostrar banner inicial del sistema"""
        banner = f"""
{Fore.CYAN}{'='*60}
{Fore.YELLOW}    SCRAPER PNA R√çOS - SISTEMA DE MONITOREO HIDROL√ìGICO
{Fore.CYAN}{'='*60}
{Fore.GREEN}üìç URL: {self.url}
{Fore.GREEN}üéØ Estaciones objetivo: {len(self.estaciones_objetivo)}
{Fore.GREEN}‚è∞ Timestamp: {self.timestamp.strftime("%Y-%m-%d %H:%M:%S")}
{Fore.CYAN}{'='*60}{Style.RESET_ALL}
        """
        print(banner)
        self.logger.info("Scraper PNA iniciado")
    
    def obtener_datos_web(self):
        """Obtener datos de la p√°gina web de la PNA"""
        print(f"{Fore.BLUE}[1/4] Obteniendo datos de la web...{Style.RESET_ALL}")
        
        for intento in range(config.REINTENTOS_MAX):
            try:
                self.logger.info(f"Intento {intento + 1} de obtener datos web")
                
                response = self.session.get(
                    self.url, 
                    timeout=config.TIMEOUT_REQUEST
                )
                response.raise_for_status()
                response.encoding = 'utf-8'
                
                print(f"{Fore.GREEN}‚úì Datos obtenidos exitosamente ({len(response.text)} caracteres){Style.RESET_ALL}")
                self.logger.info(f"Datos web obtenidos: {len(response.text)} caracteres")
                
                return response.text
                
            except requests.exceptions.RequestException as e:
                self.logger.error(f"Error en intento {intento + 1}: {e}")
                if intento < config.REINTENTOS_MAX - 1:
                    print(f"{Fore.YELLOW}‚ö† Error en intento {intento + 1}, reintentando en {config.DELAY_ENTRE_REINTENTOS}s...{Style.RESET_ALL}")
                    time.sleep(config.DELAY_ENTRE_REINTENTOS)
                else:
                    print(f"{Fore.RED}‚úó Error fatal al obtener datos web{Style.RESET_ALL}")
                    raise
        
        return None
    
    def parsear_html(self, html_content):
        """Parsear HTML y extraer solo Puerto, Ult. registro y Estado"""
        print(f"{Fore.BLUE}[2/4] Parseando datos HTML (Puerto, Altura, Estado)...{Style.RESET_ALL}")
        
        soup = BeautifulSoup(html_content, 'lxml')
        
        # Buscar todas las filas de tabla
        filas = soup.find_all('tr')
        self.logger.info(f"Encontradas {len(filas)} filas en la p√°gina")
        
        datos_encontrados = []
        
        for fila in filas:
            celdas = fila.find_all(['td', 'th'])
            
            # Verificar que tiene suficientes columnas (m√≠nimo para puerto, altura, estado)
            if len(celdas) >= 6:
                try:
                    # Obtener texto de cada celda
                    textos = [celda.get_text(strip=True) for celda in celdas]
                    
                    # Seg√∫n el an√°lisis correcto de la p√°gina PNA:
                    # Columna 0: Puerto/Estaci√≥n
                    # Columna 2: Altura actual (Ult. registro)  
                    # Columna 6: Estado/Tendencia
                    
                    puerto = textos[0] if len(textos) > 0 else ""
                    altura = textos[2] if len(textos) > 2 else ""
                    estado = textos[6] if len(textos) > 6 else ""
                    
                    # Filtrar filas v√°lidas
                    if (puerto and 
                        puerto not in ["RIO", "DETALLE", "", "FUENTES", "Prefectura", "Puerto"] and
                        not puerto.startswith("FUENTES") and
                        not puerto.startswith("Los datos") and
                        altura and 
                        altura not in ["", "-", "ALTURA", "Ult. registro"] and
                        estado and
                        estado not in ["", "Estado"]):
                        
                        datos_encontrados.append({
                            'puerto': puerto,
                            'altura': altura,
                            'estado': estado
                        })
                        
                        # Debug: mostrar primeros registros encontrados
                        if config.DEBUG_MODE and len(datos_encontrados) <= 5:
                            self.logger.debug(f"Registro {len(datos_encontrados)}: {puerto} - {altura}m - {estado}")
                            
                except Exception as e:
                    self.logger.debug(f"Error procesando fila: {e}")
                    continue
        
        self.logger.info(f"Datos extra√≠dos de HTML: {len(datos_encontrados)} registros")
        print(f"{Fore.GREEN}‚úì Parseado completado: {len(datos_encontrados)} registros encontrados{Style.RESET_ALL}")
        
        # Mostrar muestra de datos encontrados
        if config.DEBUG_MODE and datos_encontrados:
            print(f"{Fore.CYAN}üîç MUESTRA DE DATOS PARSEADOS (primeros 5):{Style.RESET_ALL}")
            for i, dato in enumerate(datos_encontrados[:5]):
                print(f"   {i+1}. {dato['puerto']} - {dato['altura']} - {dato['estado']}")
        
        return datos_encontrados
    
    def filtrar_estaciones_objetivo(self, datos_brutos):
        """Filtrar solo las 36 estaciones que necesitamos"""
        print(f"{Fore.BLUE}[3/4] Filtrando 36 estaciones objetivo...{Style.RESET_ALL}")
        
        datos_filtrados = []
        estaciones_encontradas = set()
        
        for dato in datos_brutos:
            puerto = dato['puerto'].upper().strip()
            
            # Buscar coincidencias exactas con nuestras estaciones objetivo
            for estacion_objetivo in self.estaciones_objetivo:
                if puerto == estacion_objetivo.upper():
                    # Crear registro limpio con solo los 3 campos necesarios
                    altura_limpia = self.limpiar_numero(dato['altura'])
                    
                    datos_filtrados.append({
                        'estacion': estacion_objetivo,
                        'puerto_original': dato['puerto'],
                        'altura': altura_limpia,
                        'tendencia': dato['estado'],
                        'timestamp_scraping': self.timestamp.strftime("%Y-%m-%d %H:%M:%S")
                    })
                    estaciones_encontradas.add(estacion_objetivo)
                    break
        
        # Mostrar resumen
        print(f"{Fore.GREEN}‚úì Estaciones encontradas: {len(estaciones_encontradas)}/{len(self.estaciones_objetivo)}{Style.RESET_ALL}")
        
        # Mostrar estaciones no encontradas
        estaciones_faltantes = set(self.estaciones_objetivo) - estaciones_encontradas
        if estaciones_faltantes:
            print(f"{Fore.YELLOW}‚ö† Estaciones no encontradas: {', '.join(sorted(estaciones_faltantes))}{Style.RESET_ALL}")
            self.logger.warning(f"Estaciones faltantes: {estaciones_faltantes}")
        
        # Mostrar datos encontrados en formato solicitado
        if config.DEBUG_MODE and datos_filtrados:
            print(f"\n{Fore.CYAN}üìä DATOS EN FORMATO SOLICITADO:{Style.RESET_ALL}")
            for dato in datos_filtrados:
                altura_str = f"{dato['altura']}m" if dato['altura'] != 'S/E' else 'Sin datos'
                tendencia = dato['tendencia']
                print(f"   {Fore.WHITE}{dato['estacion']:<20} (Altura - Tendencia): {altura_str} - {tendencia}{Style.RESET_ALL}")
        
        self.datos_extraidos = datos_filtrados
        return datos_filtrados
    
    def limpiar_numero(self, valor):
        """Limpiar y convertir valores num√©ricos"""
        if not valor or valor.strip() in ['S/E', '-', '']:
            return 'S/E'
        
        # Remover caracteres no num√©ricos excepto punto y signo negativo
        valor_limpio = re.sub(r'[^\d\.\-]', '', str(valor).strip())
        
        try:
            return float(valor_limpio)
        except (ValueError, TypeError):
            return 'S/E'
    
    def guardar_datos(self):
        """Guardar datos en Excel y CSV"""
        print(f"{Fore.BLUE}[4/4] Guardando datos...{Style.RESET_ALL}")
        
        if not self.datos_extraidos:
            print(f"{Fore.RED}‚úó No hay datos para guardar{Style.RESET_ALL}")
            return False
        
        # Crear DataFrame
        df = pd.DataFrame(self.datos_extraidos)
        
        # Generar nombres de archivo con timestamp
        fecha_str = self.timestamp.strftime("%Y%m%d_%H%M%S")
        archivo_excel = config.ARCHIVO_DATOS_EXCEL.format(fecha_str)
        archivo_csv = config.ARCHIVO_DATOS_CSV.format(fecha_str)
        
        try:
            # Guardar en Excel
            df.to_excel(archivo_excel, index=False, engine='openpyxl')
            print(f"{Fore.GREEN}‚úì Datos guardados en Excel: {archivo_excel}{Style.RESET_ALL}")
            
            # Guardar en CSV
            df.to_csv(archivo_csv, index=False, encoding='utf-8')
            print(f"{Fore.GREEN}‚úì Datos guardados en CSV: {archivo_csv}{Style.RESET_ALL}")
            
            self.logger.info(f"Datos guardados: {len(self.datos_extraidos)} registros")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚úó Error al guardar datos: {e}{Style.RESET_ALL}")
            self.logger.error(f"Error guardando datos: {e}")
            return False
    
    def detectar_alertas(self):
        """Detectar niveles cr√≠ticos y generar alertas"""
        alertas = []
        
        for dato in self.datos_extraidos:
            estacion = dato['estacion']
            altura = dato['altura']
            
            if altura == 'S/E' or not isinstance(altura, (int, float)):
                continue
            
            # Obtener niveles cr√≠ticos para esta estaci√≥n
            if estacion in config.NIVELES_CRITICOS:
                nivel_alerta = config.NIVELES_CRITICOS[estacion]['alerta']
                nivel_evacuacion = config.NIVELES_CRITICOS[estacion]['evacuacion']
            else:
                nivel_alerta = config.NIVEL_ALERTA_DEFECTO
                nivel_evacuacion = config.NIVEL_EVACUACION_DEFECTO
            
            # Verificar alertas
            if altura >= nivel_evacuacion:
                alertas.append({
                    'estacion': estacion,
                    'altura': altura,
                    'tipo': 'EVACUACI√ìN',
                    'nivel_critico': nivel_evacuacion,
                    'tendencia': dato['tendencia']
                })
            elif altura >= nivel_alerta:
                alertas.append({
                    'estacion': estacion,
                    'altura': altura,
                    'tipo': 'ALERTA',
                    'nivel_critico': nivel_alerta,
                    'tendencia': dato['tendencia']
                })
        
        return alertas
    
    def enviar_whatsapp(self, mensaje):
        """Enviar mensaje por WhatsApp"""
        try:
            print(f"{Fore.BLUE}üì± Enviando mensaje por WhatsApp...{Style.RESET_ALL}")
            
            # Enviar mensaje inmediatamente
            pwk.sendwhatmsg_instantly(
                config.NUMERO_WHATSAPP,
                mensaje,
                wait_time=config.DELAY_WHATSAPP,
                tab_close=True
            )
            
            print(f"{Fore.GREEN}‚úì Mensaje enviado por WhatsApp{Style.RESET_ALL}")
            self.logger.info("Mensaje WhatsApp enviado exitosamente")
            
        except Exception as e:
            print(f"{Fore.RED}‚úó Error enviando WhatsApp: {e}{Style.RESET_ALL}")
            self.logger.error(f"Error WhatsApp: {e}")
    
    def generar_mensaje_whatsapp(self):
        """Generar mensaje espec√≠fico para WhatsApp con las 3 estaciones"""
        
        # Filtrar solo las 3 estaciones espec√≠ficas para WhatsApp
        datos_whatsapp = []
        
        for dato in self.datos_extraidos:
            if dato['estacion'] in config.ESTACIONES_WHATSAPP:
                datos_whatsapp.append(dato)
        
        if not datos_whatsapp:
            return None
        
        # Obtener fecha de la p√°gina (usar la fecha de scraping)
        fecha_str = self.timestamp.strftime("%d/%m/%y")
        
        # Construir mensaje en el formato solicitado
        mensaje = "Buenos d√≠as\n"
        mensaje += "Altura de los r√≠os\n"
        mensaje += f"{fecha_str}\n\n\n"
        
        # Ordenar datos seg√∫n el orden solicitado: ANDRESITO, IGUAZU, ROSARIO
        orden_estaciones = ["ANDRESITO", "IGUAZU", "ROSARIO"]
        
        for estacion_nombre in orden_estaciones:
            # Buscar la estaci√≥n en los datos
            for dato in datos_whatsapp:
                if dato['estacion'] == estacion_nombre:
                    altura = dato['altura'] if dato['altura'] != 'S/E' else 'Sin datos'
                    tendencia = dato['tendencia']
                    
                    # Formatear tendencia con emojis
                    if tendencia == "CRECE":
                        tendencia_emoji = "CRECE ‚¨ÜÔ∏è"
                    elif tendencia == "BAJA":
                        tendencia_emoji = "BAJA ‚¨áÔ∏è"
                    elif tendencia == "ESTAC.":
                        tendencia_emoji = "ESTACIONADO ‚û°Ô∏è"
                    else:
                        tendencia_emoji = tendencia  # Para casos como S/E.
                    
                    # Formatear nombre de estaci√≥n
                    nombre_mostrar = estacion_nombre
                    if estacion_nombre == "IGUAZU":
                        nombre_mostrar = "Iguaz√∫"
                    elif estacion_nombre == "ANDRESITO":
                        nombre_mostrar = "Andresito"
                    elif estacion_nombre == "ROSARIO":
                        nombre_mostrar = "Rosario"
                    
                    # Agregar l√≠nea al mensaje
                    if altura != 'Sin datos':
                        mensaje += f"{nombre_mostrar}:   {altura} - {tendencia_emoji}\n"
                    else:
                        mensaje += f"{nombre_mostrar}:   Sin datos - {tendencia_emoji}\n"
                    break
        
        mensaje += "\nInformaci√≥n brindada por la pagina web de Prefectura Naval Argentina."
        
        return mensaje
    
    def obtener_credenciales_sua(self):
        """Obtener credenciales SUA de forma segura"""
        print(f"\n{Fore.CYAN}üîê CREDENCIALES SISTEMA SUA ROSARIO{Style.RESET_ALL}")
        print(f"{Fore.CYAN}{'='*50}{Style.RESET_ALL}")
        
        # Si ya est√°n configuradas, usarlas
        if config.SUA_USERNAME and config.SUA_PASSWORD:
            print(f"{Fore.GREEN}‚úì Credenciales encontradas en configuraci√≥n{Style.RESET_ALL}")
            return config.SUA_USERNAME, config.SUA_PASSWORD
        
        print(f"{Fore.YELLOW}Por favor, ingresa tus credenciales del Sistema SUA:{Style.RESET_ALL}")
        
        while True:
            try:
                usuario = input(f"{Fore.CYAN}Usuario SUA: {Style.RESET_ALL}").strip()
                if not usuario:
                    print(f"{Fore.RED}‚úó El usuario no puede estar vac√≠o{Style.RESET_ALL}")
                    continue
                
                contrase√±a = getpass.getpass(f"{Fore.CYAN}Contrase√±a SUA: {Style.RESET_ALL}")
                if not contrase√±a:
                    print(f"{Fore.RED}‚úó La contrase√±a no puede estar vac√≠a{Style.RESET_ALL}")
                    continue
                
                # Confirmar credenciales
                print(f"\n{Fore.YELLOW}Credenciales ingresadas:{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}Usuario: {usuario}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}Contrase√±a: {'*' * len(contrase√±a)}{Style.RESET_ALL}")
                
                confirmar = input(f"{Fore.CYAN}¬øSon correctas? (s/n): {Style.RESET_ALL}").strip().lower()
                if confirmar in ['s', 'si', 'yes', 'y']:
                    return usuario, contrase√±a
                else:
                    print(f"{Fore.YELLOW}Volviendo a solicitar credenciales...{Style.RESET_ALL}\n")
                    
            except KeyboardInterrupt:
                print(f"\n{Fore.RED}‚úó Operaci√≥n cancelada por el usuario{Style.RESET_ALL}")
                return None, None
    
    def cargar_datos_sua(self):
        """Cargar datos autom√°ticamente en el sistema SUA de Rosario"""
        if not config.SUA_ENABLED:
            print(f"{Fore.YELLOW}‚Ñπ SUA activado: No habilitado en configuraci√≥n{Style.RESET_ALL}")
            return True
            
        if not self.datos_extraidos:
            print(f"{Fore.RED}‚úó No hay datos para cargar en SUA{Style.RESET_ALL}")
            return False
        
        # Obtener credenciales de forma segura
        usuario, contrase√±a = self.obtener_credenciales_sua()
        if not usuario or not contrase√±a:
            print(f"{Fore.RED}‚úó No se pudieron obtener credenciales v√°lidas{Style.RESET_ALL}")
            return False
        
        # Intentar hasta 3 veces en caso de error de autorizaci√≥n    
        max_intentos = 3
        for intento in range(1, max_intentos + 1):
            print(f"{Fore.CYAN}üåê Intento {intento}/{max_intentos} - Iniciando carga autom√°tica en SUA Rosario...{Style.RESET_ALL}")
            
            resultado = self._cargar_datos_sua_intento(usuario, contrase√±a)
            
            if resultado == "reintentar":
                print(f"{Fore.YELLOW}‚ö† Error de autorizaci√≥n detectado. Reintentando...{Style.RESET_ALL}")
                time.sleep(5)  # Esperar antes del siguiente intento
                continue
            elif resultado:
                return True
            else:
                if intento < max_intentos:
                    print(f"{Fore.YELLOW}‚ö† Intento {intento} fall√≥. Reintentando...{Style.RESET_ALL}")
                    time.sleep(5)
                    continue
                else:
                    print(f"{Fore.RED}‚úó Todos los intentos fallaron{Style.RESET_ALL}")
                    return False
        
        return False
    
    def _cargar_datos_sua_intento(self, usuario, contrase√±a):
        """Intento individual de cargar datos en SUA"""
        driver = None
        try:
            # Configurar Chrome para que no se cierre autom√°ticamente
            chrome_options = Options()
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # Inicializar driver con ChromeDriverManager
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            wait = WebDriverWait(driver, config.SUA_TIMEOUT)
            
            # 1. Ir a la p√°gina de login
            print(f"{Fore.BLUE}[1/7] Accediendo al sistema SUA...{Style.RESET_ALL}")
            driver.get(config.SUA_URL_LOGIN)
            time.sleep(config.SUA_DELAY)
            
            # 2. Login
            print(f"{Fore.BLUE}[2/7] Realizando login...{Style.RESET_ALL}")
            username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
            password_field = driver.find_element(By.NAME, "password")
            
            # Hacer click para activar los campos (quitar readonly)
            username_field.click()
            time.sleep(1)
            username_field.clear()
            username_field.send_keys(usuario)
            
            password_field.click()
            time.sleep(1)
            password_field.clear()
            password_field.send_keys(contrase√±a)
            
            # Buscar y hacer click en bot√≥n de login
            login_button = driver.find_element(By.XPATH, "//input[@type='submit' or @type='button']")
            login_button.click()
            time.sleep(config.SUA_DELAY * 2)
            
            # Verificar si hay error de autorizaci√≥n despu√©s del login
            if self._verificar_error_autorizacion(driver):
                return "reintentar"
            
            # 3. Navegar a Solicitud
            print(f"{Fore.BLUE}[3/7] Navegando a secci√≥n Solicitud...{Style.RESET_ALL}")
            try:
                solicitud_link = wait.until(EC.element_to_be_clickable((By.XPATH, "//a[@class='nivel1' and contains(text(), 'Solicitud')]")))
                print(f"{Fore.GREEN}   ‚úì Enlace 'Solicitud' encontrado{Style.RESET_ALL}")
                solicitud_link.click()
                time.sleep(config.SUA_DELAY * 2)  # M√°s tiempo para cargar
                print(f"{Fore.GREEN}   ‚úì Click en 'Solicitud' realizado{Style.RESET_ALL}")
                
                # Verificar si hay error de autorizaci√≥n despu√©s de navegar
                if self._verificar_error_autorizacion(driver):
                    return "reintentar"
                    
            except Exception as e:
                print(f"{Fore.RED}   ‚úó Error navegando a Solicitud: {e}{Style.RESET_ALL}")
                raise
            
            # 4. Hacer click en "Carga √°gil"
            print(f"{Fore.BLUE}[4/7] Navegando a Carga √°gil...{Style.RESET_ALL}")
            try:
                carga_agil_link = wait.until(EC.element_to_be_clickable((By.XPATH, "//a[@class='subnivel1' and contains(text(), 'Carga √°gil')]")))
                print(f"{Fore.GREEN}   ‚úì Enlace 'Carga √°gil' encontrado{Style.RESET_ALL}")
                carga_agil_link.click()
                time.sleep(config.SUA_DELAY * 2)
                print(f"{Fore.GREEN}   ‚úì Click en 'Carga √°gil' realizado{Style.RESET_ALL}")
                
                # Verificar si hay error de autorizaci√≥n despu√©s de navegar a Carga √°gil
                if self._verificar_error_autorizacion(driver):
                    return "reintentar"
                    
            except Exception as e:
                print(f"{Fore.RED}   ‚úó Error navegando a Carga √°gil: {e}{Style.RESET_ALL}")
                raise
            
            # 5. Buscar y seleccionar tipo de solicitud
            print(f"{Fore.BLUE}[5/7] Seleccionando tipo de solicitud...{Style.RESET_ALL}")
            
            try:
                # Encontrar el campo de autocompletar
                subtipos_field = wait.until(EC.element_to_be_clickable((By.ID, "subtipos")))
                print(f"{Fore.GREEN}   ‚úì Campo 'subtipos' encontrado{Style.RESET_ALL}")
                
                # Limpiar y escribir "Altura de los r√≠os"
                subtipos_field.clear()
                subtipos_field.send_keys("Altura de los r√≠os")
                print(f"{Fore.GREEN}   ‚úì Texto 'Altura de los r√≠os' ingresado{Style.RESET_ALL}")
                time.sleep(config.SUA_DELAY)
                
                # Buscar y hacer click en la opci√≥n espec√≠fica "Suceso [Clima] - Altura de los r√≠os"
                print(f"{Fore.GREEN}   ‚úì Buscando opci√≥n 'Suceso [Clima] - Altura de los r√≠os'...{Style.RESET_ALL}")
                
                # Selector espec√≠fico para la opci√≥n
                option = wait.until(EC.element_to_be_clickable((By.XPATH, "//a[@class='ui-corner-all' and contains(text(), 'Suceso [Clima] - Altura de los r√≠os')]")))
                print(f"{Fore.GREEN}   ‚úì Opci√≥n 'Suceso [Clima] - Altura de los r√≠os' encontrada{Style.RESET_ALL}")
                
                option.click()
                print(f"{Fore.GREEN}   ‚úì Opci√≥n seleccionada - formulario habilitado{Style.RESET_ALL}")
                time.sleep(config.SUA_DELAY * 2)
                
            except Exception as e:
                print(f"{Fore.RED}   ‚úó Error seleccionando tipo de solicitud: {e}{Style.RESET_ALL}")
                
                # Debug: mostrar opciones disponibles
                try:
                    print(f"{Fore.YELLOW}   Debug - Opciones disponibles en el autocompletar:{Style.RESET_ALL}")
                    opciones = driver.find_elements(By.XPATH, "//a[contains(@class, 'ui-corner-all')]")
                    for i, opcion in enumerate(opciones[:10]):  # Mostrar las primeras 10
                        texto = opcion.text.strip()
                        if texto:
                            print(f"{Fore.YELLOW}     {i+1}. '{texto}'{Style.RESET_ALL}")
                except:
                    pass
                    
                raise
            
            # Verificar si hay error de autorizaci√≥n despu√©s de seleccionar tipo
            if self._verificar_error_autorizacion(driver):
                return "reintentar"
            
            # 6. Llenar los 36 campos de datos
            print(f"{Fore.BLUE}[6/7] Cargando datos de las 36 estaciones...{Style.RESET_ALL}")
            
            # Preparar datos en el orden correcto
            datos_ordenados = []
            for estacion_nombre in config.ESTACIONES_OBJETIVO:
                # Buscar la estaci√≥n en los datos extra√≠dos
                dato_encontrado = None
                for dato in self.datos_extraidos:
                    if dato['estacion'] == estacion_nombre:
                        dato_encontrado = dato
                        break
                
                if dato_encontrado:
                    altura = dato_encontrado['altura'] if dato_encontrado['altura'] != 'S/E' else 'Sin datos'
                    tendencia = dato_encontrado['tendencia']
                    
                    # Formatear tendencia
                    if tendencia == "ESTAC.":
                        tendencia = "ESTACIONADO"
                    
                    # Formato: solo datos (opci√≥n B)
                    texto_campo = f"{altura}m - {tendencia}"
                    datos_ordenados.append(texto_campo)
                else:
                    datos_ordenados.append("Sin datos - S/E")
            
            # Llenar cada campo
            campos_llenos = 0
            for i, texto in enumerate(datos_ordenados):
                try:
                    campo = driver.find_element(By.NAME, f"preguntas[{i}].texto")
                    campo.clear()
                    campo.send_keys(texto)
                    campos_llenos += 1
                    
                    if (i + 1) % 10 == 0:  # Mostrar progreso cada 10 campos
                        print(f"{Fore.GREEN}   ‚úì Campos llenados: {i + 1}/36{Style.RESET_ALL}")
                        
                except NoSuchElementException:
                    print(f"{Fore.YELLOW}   ‚ö† Campo preguntas[{i}].texto no encontrado{Style.RESET_ALL}")
                    continue
            
            print(f"{Fore.GREEN}‚úì Campos llenados exitosamente: {campos_llenos}/36{Style.RESET_ALL}")
            
            # 7. Esperar confirmaci√≥n del usuario
            print(f"{Fore.BLUE}[7/7] Formulario completado - Esperando confirmaci√≥n del usuario{Style.RESET_ALL}")
            print(f"{Fore.GREEN}‚úì Se han cargado {campos_llenos} campos con datos de las estaciones{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}{'='*60}{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}üìã INSTRUCCIONES FINALES:{Style.RESET_ALL}")
            print(f"{Fore.CYAN}   1. Revisa que todos los datos sean correctos{Style.RESET_ALL}")
            print(f"{Fore.CYAN}   2. Verifica que las alturas y tendencias est√©n bien{Style.RESET_ALL}")
            print(f"{Fore.CYAN}   3. Haz click en 'Enviar' o 'Guardar' cuando est√©s listo{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}{'='*60}{Style.RESET_ALL}")
            
            # Mantener el navegador abierto para que el usuario confirme
            input(f"{Fore.CYAN}Presiona Enter DESPU√âS de revisar y enviar el formulario manualmente...{Style.RESET_ALL}")
            print(f"{Fore.GREEN}‚úì Proceso de carga en SUA completado{Style.RESET_ALL}")
            
            driver.quit()
            
            print(f"{Fore.GREEN}‚úì Carga en SUA completada exitosamente{Style.RESET_ALL}")
            self.logger.info(f"Datos cargados en SUA: {campos_llenos} campos")
            return True
            
        except TimeoutException as e:
            print(f"{Fore.RED}‚úó Timeout en SUA: {e}{Style.RESET_ALL}")
            self.logger.error(f"Timeout SUA: {e}")
            try:
                if driver:
                    driver.quit()
            except:
                pass
            return False
            
        except Exception as e:
            print(f"{Fore.RED}‚úó Error en carga SUA: {e}{Style.RESET_ALL}")
            self.logger.error(f"Error SUA: {e}")
            try:
                if driver:
                    driver.quit()
            except:
                pass
            return False
    
    def _verificar_error_autorizacion(self, driver):
        """Verificar si hay un error de 'Acceso no autorizado a esta secci√≥n'"""
        try:
            # Buscar el mensaje de error espec√≠fico
            page_source = driver.page_source
            
            if "Acceso no autorizado a esta secci√≥n" in page_source:
                print(f"{Fore.RED}   ‚úó Error detectado: Acceso no autorizado a esta secci√≥n{Style.RESET_ALL}")
                return True
                
            # Tambi√©n verificar por el elemento HTML espec√≠fico
            try:
                error_element = driver.find_element(By.XPATH, "//b[contains(text(), 'Acceso no autorizado a esta secci√≥n')]")
                if error_element:
                    print(f"{Fore.RED}   ‚úó Error detectado: Acceso no autorizado a esta secci√≥n{Style.RESET_ALL}")
                    return True
            except NoSuchElementException:
                pass
                
            return False
            
        except Exception as e:
            print(f"{Fore.YELLOW}   ‚ö† Error verificando autorizaci√≥n: {e}{Style.RESET_ALL}")
            return False
    
    def ejecutar_scraping(self):
        """Ejecutar el proceso completo de scraping"""
        try:
            print(f"{Fore.MAGENTA}üöÄ Iniciando proceso de scraping...{Style.RESET_ALL}\n")
            
            # 1. Obtener datos web
            html_content = self.obtener_datos_web()
            if not html_content:
                return False
            
            # 2. Parsear HTML
            datos_brutos = self.parsear_html(html_content)
            if not datos_brutos:
                print(f"{Fore.RED}‚úó No se encontraron datos en la p√°gina{Style.RESET_ALL}")
                return False
            
            # 3. Filtrar estaciones objetivo
            datos_filtrados = self.filtrar_estaciones_objetivo(datos_brutos)
            if not datos_filtrados:
                print(f"{Fore.RED}‚úó No se encontraron estaciones objetivo{Style.RESET_ALL}")
                return False
            
            # 4. Guardar datos
            if not self.guardar_datos():
                return False
            
            # 5. Detectar alertas
            alertas = self.detectar_alertas()
            
            if alertas:
                print(f"\n{Fore.RED}üö® ALERTAS DETECTADAS: {len(alertas)}{Style.RESET_ALL}")
                for alerta in alertas:
                    print(f"   {Fore.RED}{alerta['tipo']}: {alerta['estacion']} - {alerta['altura']}m{Style.RESET_ALL}")
            else:
                print(f"\n{Fore.GREEN}‚úì No se detectaron alertas cr√≠ticas{Style.RESET_ALL}")
            
            # 6. Generar y enviar mensaje de WhatsApp (siempre)
            mensaje_whatsapp = self.generar_mensaje_whatsapp()
            if mensaje_whatsapp:
                print(f"\n{Fore.BLUE}üì± Mensaje de WhatsApp generado:{Style.RESET_ALL}")
                print(f"{Fore.CYAN}{'-'*40}")
                print(mensaje_whatsapp)
                print(f"{'-'*40}{Style.RESET_ALL}")
                self.enviar_whatsapp(mensaje_whatsapp)
            else:
                print(f"\n{Fore.YELLOW}‚ö† No se pudieron obtener datos para WhatsApp{Style.RESET_ALL}")
            
            # 7. Cargar datos en SUA Rosario (si est√° habilitado)
            sua_success = self.cargar_datos_sua()
            
            # Resumen final
            print(f"\n{Fore.CYAN}{'='*60}")
            print(f"{Fore.YELLOW}üìä RESUMEN FINAL:")
            print(f"{Fore.GREEN}   ‚Ä¢ Estaciones procesadas: {len(datos_filtrados)}")
            print(f"{Fore.GREEN}   ‚Ä¢ Alertas detectadas: {len(alertas)}")
            print(f"{Fore.GREEN}   ‚Ä¢ WhatsApp enviado: {'S√≠' if mensaje_whatsapp else 'No'}")
            print(f"{Fore.GREEN}   ‚Ä¢ SUA cargado: {'S√≠' if sua_success else 'No'}")
            print(f"{Fore.GREEN}   ‚Ä¢ Timestamp: {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
            
            self.logger.info(f"Scraping completado exitosamente: {len(datos_filtrados)} estaciones, {len(alertas)} alertas")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚úó Error fatal en scraping: {e}{Style.RESET_ALL}")
            self.logger.error(f"Error fatal: {e}")
            return False

def main():
    """Funci√≥n principal"""
    try:
        scraper = ScraperPNA()
        success = scraper.ejecutar_scraping()
        
        if success:
            print(f"\n{Fore.GREEN}üéâ Proceso completado exitosamente{Style.RESET_ALL}")
            return 0
        else:
            print(f"\n{Fore.RED}‚ùå Proceso terminado con errores{Style.RESET_ALL}")
            return 1
            
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö† Proceso interrumpido por el usuario{Style.RESET_ALL}")
        return 2
    except Exception as e:
        print(f"\n{Fore.RED}üí• Error fatal: {e}{Style.RESET_ALL}")
        return 3

if __name__ == "__main__":
    exit(main())